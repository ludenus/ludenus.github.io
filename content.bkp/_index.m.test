**МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ**

**УКРАЇНСЬКА АКАДЕМІЯ ДРУКАРСТВА**

**КАФЕДРА ІНФОРМАЦІЙНОЇ, БІБЛІОТЕЧНОЇ ТА АРХІВНОЇ СПРАВИ**

РОБОТА ПЕРЕВІРЕНА І ДОПУЩЕНА ДО ЗАХИСТУ

Зав. кафедри ІБАС та ІМ,

проф., д-р іст. наук

Михайло ПАСИЧНИК.
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ (підпис)
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ (дата)

**КВАЛІФІКАЦІЙНА РОБОТА**

на здобуття освітнього ступеня магістра зі спеціальності

029 «Інформаційна, бібліотечна та архівна справа»

за магістерською програмою професійного спрямування

«Документознавство та інформаційна діяльність» на тему:

« **Використання систем контролю версій для колективної роботи над мультимедійною документацією** »

Виконав:

студент групи ДКМ-61

Андрєєв Андрій Олексійович
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ (підпис)

Науковий керівник:

кандидат філологічних наук, доцент

Ткач Леся Миколаївна
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ (підпис)

Засвідчую, що в цій кваліфікаційній роботі немає запозичень із праць інших авторів без відповідних посилань. Студент \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ (підпис)

ЛЬВІВ – 2023

# ЗМІСТ

[**ЗМІСТ 2**](#_m07p567sm1hl)

[**ВСТУП 3**](#_26zbzsr42tc)

[Мета і завдання дослідження 3](#_qpnog1wyjqhf)

[Об'єкт дослідження 4](#_2wkreipu1kxi)

[Предмет дослідження 4](#_2a6ljs42nbob)

[Наукова новизна одержаних результатів 4](#_y3l3o6297d4l)

[**Розділ 1 5**](#_vzy0aw3n228d)

[**Версії 5**](#_w9ct4t9kui83)

[Наука 5](#_33ro2541o3k2)

[Мистецтво 6](#_btvhh4idyxgk)

[Юридична і законотворча діяльність 7](#_hbcznkwlfqne)

[Переклади 8](#_6bdh5y4r2k6d)

[Індустрія та інше 9](#_ypk64cv2u72e)

[**Розділ 2 12**](#_y0eoobhe43fg)

[**Колективна робота 12**](#_175dbn7394f9)

[Процеси та практики 13](#_knqpaenstjxx)

[Взаємні ревьʼю 14](#_dw9qn1gphhxk)

[Інструменти 15](#_1u31edtnaiaz)

[Інші чинники 18](#_yc35xpu64dbz)

[Різноманітність 18](#_tl46jc76kz2v)

[Локалізація та інтернаціоналізація 19](#_g8fijge9o3hf)

[Цільова аудиторія 21](#_8gl3qkwpinwu)

[**Теоретичні основи систем контролю версій 24**](#_7u29sv1ot1rs)

[Історія розвитку систем контролю версій. 24](#_bejmzisi4pgw)

[Історичний контекст систем контролю версій. 24](#_zdbnpvf2wmmb)

[Опис найперших методів контролю версій
(ручні методи, контроль документації) 25](#_6wpja456ckqx)

[Ручні методи в контролі версій 26](#_yrnuwfy20lcq)

[Контроль документації 26](#_nnmw70hvn0h4)

[Перехід до систематичного контролю версій 27](#_e5tgwyprc9uy)

[Поява необхідності у систематичному контролі версій у розробці програмного забезпечення і документації. 27](#_1hn9pc3y9yyi)

[Зростаюча складність проектів програмного забезпечення 28](#_8teo1vf1c3fq)

[Поява ітеративних та інкрементних моделей розробки 28](#_jwvf0i4t1xfv)

[Технологічні досягнення 29](#_1lrgfkk75cjy)

[**Список використаних джерел 30**](#_tecnuaah1mr)

# ВСТУП

Сучасні програмні та апаратні продукти є складними системами, що потребують ґрунтовної мультимедійної документації. Розробка такої документації, як і самих продуктів, є ітеративним колективним процесом. Ефективна спільна робота над документацією вимагає побудови процесів для взаємодії співавторів і кінцевих споживачів, своєчасного внесення і публікації змін та отримання зворотного звʼязку, а також використання спеціальних технічних рішень для перегляду, порівняння, редагування та узгодження змін у документах. Одним з таких рішень є системи контролю версій, зокрема Git та GitHub, які набули широкого поширення останнім часом. В цій роботі доводиться доцільність використання систем контролю версій для колективної роботи над документацією.

Вивчення можливостей цих систем для створення колективної мультимедійної документації є актуальним, оскільки дозволяє поліпшити якість технічної документації, прискорити її розробку, оптимізувати взаємодію у командах авторів та розробників. Крім того, поширення використання таких систем контролю версій сприятиме підвищенню кваліфікації фахівців в Україні згідно із світовими стандартами.

Отже, дослідження є актуальним і має як теоретичне, так і практичне значення.

## Мета і завдання дослідження

Мета роботи - обґрунтувати доцільність використання систем контролю версій Git та GitHub для колективного створення і супроводження мультимедійної технічної документації.

Для досягнення мети необхідно виконати такі завдання:

- Обґрунтувати доцільність збереження версій та контролю історії змін.
- Виявити практики і інструменти, які збільшують ефективність колективної роботи над документами.
- Проаналізувати теоретичні основи та історію виникнення систем контролю версій.
- Опанувати базову термінологію Git та особливості роботи в GitHub.
- Розробити приклад мультимедійної технічної документації з використанням можливостей GitHub.

## Об'єкт дослідження

Об'єктом дослідження є процес створення і супроводження колективної мультимедійної технічної документації.

## Предмет дослідження

Предметом дослідження є можливості систем контролю версій Git та GitHub для колективної розробки, зберігання та оновлення мультимедійної технічної документації.

## Наукова новизна одержаних результатів

Наукова новизна роботи полягає в тому, що:

- Комплексно досліджено використання систем контролю версій Git та GitHub для створення і супроводження колективної мультимедійної технічної документації.
- Дістали подальший розвиток підходи до організації колективної розробки технічної документації на основі Git workflow.
- Запропоновано рекомендації щодо оптимального використання функціоналу GitHub для технічних письменників.

# Розділ 1

# Версії

Факт існування будь-якого документа означає існування багатьох його версій, адже створення документів - це поступовий, ітеративний процес. Між першим чорновиком і готовністю до публікації будь-який документ проходить проміжні етапи, і на кожному з них вміст документа поступово змінюється. Якщо недоцільно зберігати проміжні результати - створені таким чином неявні версії документів існують короткий час як ефемерні сутності. Якщо етап зміни документа логічно завершений, такий, що вважається значущим або важливим - доцільно зафіксувати його стан явно, таким чином створворивши персистентну версію документа. Пригадаємо випадки, коли існування окремих версій буде доцільне, корисне та необхідне.

## Наука

- **Академічні публікації**. Перед публікацією, наукові статті та книги проходять через багато етапів редагування та коректури. Саме зберігання всіх версій допомагає відслідковувати зміни та вносити необхідні виправлення.
- **Розробка навчальних матеріалів**. Під час створення навчальних матеріалів, викладачі і методисти можуть вносити зміни, доповнення та корекції. Існування різних версій дозволяє адаптувати навчальні матеріали та обрати оптимальний варіант для навчального процесу з урахуванням методики навчання, а також віку, фаху та освітнього рівня цільової аудиторії.
- **Дослідження та експерименти.** Під час проведення наукових досліджень, кожен етап експерименту вимагає фіксації. Саме зберігання кожної версії дозволяє науковцям досліджувати тривалі процеси, а в подальшому - систематизувати знання та результати досліджень.
- **Історичні свідоцтва і хроніки**. Фіксація подій, що відбувалися в минулому, здійснена різними дослідниками або протягом різних часових інтервалів критично важлива для всебічного ретроспективного аналізу історичних подій та джерел.

## Мистецтво

- **Музика**. Саме існування різних версій музичних творів, варіантів аранжувань опер, варіантів виконання симфоній, кавер-версії популярних пісень і робить музичне мистецтво різноманітним. Транспозиція в іншу тональність дозволяє співати пісні виконавцям із різним голосовим діапазоном.
- **Кіно і театр**. Ремейки кінострічок, різні постановки пʼєс і вистав. Режисери та актори можуть інтерпретувати п'єси по-різному, зміщувати акценти, по-різному висловлювати емоції, інакше виражати взаємодію людей із навколишнім світом.
- **Балет і танець**. Режисери і хореографи можуть створювати різні версії вистав і танців на одну і ту ж музику. Танцюристи можуть виконувати одну і ту ж хореографію по-різному.
- **Література**. Дитячі адаптації літературних творів роблять складні твори більш доступними та зрозумілими для дітей, враховуючи їхній вік та рівень розвитку, стимулюють дитячий інтерес до читання. Перетворення літературних творів на аудіокниги або комікси чи візуальні новели створює нові жанри і напрямки мистецтва.
- **Скульптура і живопис**. Процес створення реплік відомих творів є необхідним етапом навчання митців. І навіть при створенні копій, експерименти із різними матеріалами та техніками роблять кожну копію унікальним витвором мистецтва.
- **Фотографія**. Ретуш та обробка. Одне фото може мати безліч версій, залежно від того, як його оброблено та ретушовано. Фотограф може також робити кілька знімків одного і того ж об'єкта з різних ракурсів та при різному освітленні.
- **Відеоігри**. Порти, ремейки та модифікації. Консольні версії відрізняються від версій для персональних компʼютерів, можуть вимагати адаптації управління і ігрових механік. Спільноти гравців та розробники можуть створювати модифікації для ігор, змінюючи графіку, геймплей, ігровий наратив тощо.

## Юридична і законотворча діяльність

- **Ревізії документів та договорів**. Юридичні документи часто підлягають численним ревізіям та внесенню змін, і збереження кожної версії є критично важливим для відстеження змін та домовленостей, укладених у різний час. Наприклад в закон України про правила дорожнього руху [1] в період з 2005 по 2023 роки було внесено 43 правки згідно з постановами Кабінету Міністрів України і 3 правки згідно з додатковими судовими постановами.
- **Етапи переговорів**. Під час переговорів створюється кілька версій договорів, які відображають еволюцію консенсусу між сторонами.
- **Законодавство**. Законодавчі документи проходять кілька ревізій та внесення змін до та після того, як вони були прийняті, причому кожна версія має як юридичне так і історичне значення. Проектні версії, створені для консультацій та відгуків, можуть відрізнятися від початкових проектів та кінцевих прийнятих версій.
- **Правозастосування**. Для конкретних випадків правозастосування критично важливим є саме відповідність життєвого випадку конкретній версії закону або юридичної норми. Одна і та сама подія може бути кваліфікована як легальна або нелегальна в залежності від того, які версії законів були чинні, коли відбулася ця подія.

## Переклади

Переклад відіграє ключову роль у спілкуванні та взаєморозумінні між людьми з різних мовних та культурних середовищ. Передача змісту з однієї мови в іншу - складний творчий процес, який означає не тільки і не стільки механічну заміну слів за словником, але має враховувати культурний, соціальний, історичний контекст для повної і адекватної передачі інформації, ідей та емоцій. При цьому переклад завжди створює нову версію, яка буде радикально відрізнятись від оригіналу, адже в ній може не бути жодної спільної з оригіналом літери. Цікаво, що перекладений твір завжди ототожнюється з оригіналом, і автором перекладеного твору все одно вважається не перекладач, який написав весь текст перекладу, а саме автор оригіналу, хоча він не написав жодного слова перекладу.

Існування декількох версій одного тексту різними мовами дозволяє не тільки доносити інформацію до носіїв різних мов і вивчати нові мови на момент написання тексту, але й дає можливість через тисячі років (!) відновлювати втрачені, мертві мови. Один з найвідоміших прикладів - Розетський камінь [2]. Стела, на якій 196 року до н. е. було висічено три версії указу мемфіських жерців. Давньоєгипетським скорописом, давньоєгипетськими ієрогліфами, а також давньогрецькою. В ХІХ ст саме існування трьох версій тексту, написаних різними мовами, зробило можливим розшифровку єгипетських ієрогліфів Жаном-Франсуа Шампольйоном і іншими дослідниками.

Для якумога точнішої передачі змісту іноді просто було недостатньо однієї мови. Відомий приклад багатомовних версій тексту Біблії - це Поліглотти [3], видання Біблії декількома мовами, що були створені з метою кращого розуміння текстів Святого Письма. Поліглотти містили текст написаний двома або більше (найбільш повні 10 - 12) мовами, зазвичай у паралельних колонках або на сусідніх сторінках. Використовувались такі видання як в релігійних, теологічних цілях, так і для академічних, філологічних досліджень.

Таким чином, існування різних версій (перекладів) дозволяє:

- Подолати лінгвістичні барʼєри при спілкуванні
- Вивчати іноземні мови
- Оживляти мертві мови
- Точніше передавати зміст

## Індустрія та інше

Існування різних версії документів - невідʼємна частина будь-якої індустрії, адже саме можливість створювати нові версії дозволяє адаптувати виробничі, економічні та інші процеси відповідно до оточуючої реальності. Загальновідомі приклади такі:

**Стандарти**. Організації, що розробляють стандарти (наприклад, ISO або ДСТУ) випускають нові версії стандартів, щоб відображати технологічний прогрес або зміни в галузі. Зазвичай, нова версія стандарта містить рік оновлення в назві своєї версії. Наприклад державний стандарт _ДСТУ 7564:2014 Інформаційні технології. Криптографічний захист інформації. Функція хешування_ [4] заміщує застарілий _ГОСТ 34.311-95 Інформаційна технологія. Криптографічний захист інформації. Функція хешування_. А міжнародний стандарт _ISO/IEC 25010:2011 Systems and software engineering — Systems and software Quality Requirements and Evaluation (SQuaRE) — System and software quality models_ [5] прийшов на заміну _ISO/IEC 9126 Software engineering — Product quality._

Застосування нових версій стандартів необхідне, оскільки вони враховують найновіші досягнення, дослідження та практики в галузі. Із часом технології, методики та підходи до роботи змінюються, і стандарти мають відображати ці зміни, щоб залишатися актуальними та корисними. У випадку функцій хешування, наприклад, нові стандарти забезпечують криптографічну стійкість цифрового підпису. У випадку стандартів, що стосується розробки програмного забезпечення - додаються нові метрики для оцінки якості.

Застосування нових стандартів допомагає організаціям підтримувати високий рівень якості своєї продукції чи послуг, дбати про безпеку, ефективність та надійність. Крім того, вони сприяють гармонізації та інтеграції різних систем, продуктів або послуг на міжнародному рівні. Таким чином, організації, які впроваджують нові, актуальні версії стандартів:

- Можуть бути впевнені, що їх продукція або послуги відповідають найсучаснішим вимогам ринку.
- Підвищують довіру споживачів, які розуміють, що продукт або послуга відповідає визнаним стандартам якості.
- Спрощують процес взаємодії з партнерами, клієнтами або регулюючими органами.

**Медицина**. У випадку, коли для адаптації до змін потрібно враховувати не лише технологічний поступ, але й вимоги регулюючих органів, формалізація процесу створення нових версій документів і збереження історії змін є особливо важливі. Нові версії документів ВООЗ, що містять оновлені рекомендації протоколів лікування спираються на нові наукові дослідження та оновлені результати систематизацій попередніх.

Характерним прикладом щорічної зміни рекомендацій Всесвітньої організації охорони здоровʼя - є список штамів грипу, який актуальний лише один вакцинальний сезон [6]. Віруси грипу мутують настільки швидко, що застосування застарілих вакцин робить процесс вакцинації неефективним. Застосування ж нових версій вакцин, навпаки - забезпечує ефективність профілактики захворювання.

Інший приклад - це оновлені рекомендації для для лікування гіпертензії у дорослих, які містять зміни щодо порогових значень для ініціювання лікування, інтервалів моніторингу, цільового артеріального тиску та можливості призначення лікування не лікарями [7]. Важливість правильного лікування і своєчасного оновлення відповідних рекомендацій у випадку гіпертензії важко переоцінити, оскільки хвороби системи кровообігу за статистикою були і залишаються основною причиною смерті не тільки в Україні [8], але в усьому світі [9].

**Програмне забезпечення**. Існування різних версій програмного забезпечення в індустрії розробки має декілька корисних аспектів:

1. **Безпека** : Коли виявляється вразливість в програмному забезпеченні, розробники можуть випустити нову версію, яка виправляє цю вразливість. Користувачі, які оновлюють своє ПЗ до останньої версії, отримують захист від потенційних загроз.
2. **Нові функції та покращення** : З кожною новою версією програмного забезпечення можуть бути додані нові функції, які роблять продукт більш потужним або зручним для користувача.
3. **Виправлення помилок** : Помилки та баги, які були в попередніх версіях, можуть бути виправлені в нових версіях.
4. **Сумісність** : Різні версії програмного забезпечення можуть бути сумісні з різними версіями операційних систем або іншого ПЗ. Це дозволяє користувачам, які ще не готові або не можуть оновити свою ОС або інше ПЗ, продовжувати використовувати старі версії програмного забезпечення.
5. **Тестування та стабільність** : Іноді організації або розробники можуть випустити "бета" або "альфа" версії ПЗ для тестування. Це дозволяє отримати відгук від користувачів перед тим, як випустити офіційну версію.
6. **Версії для різних ринків** : Розробники можуть випускати різні версії ПЗ для різних ринків або груп користувачів. Наприклад, може існувати базова версія для звичайних користувачів та розширена версія для професіоналів.
7. **Відновлення після проблем** : Якщо нова версія ПЗ містить критичні помилки або проблеми, користувачі можуть повернутися до попередньої стабільної версії.
8. **Версійний контроль** : Існування різних версій дозволяє розробникам вести документацію та контроль змін, що полегшує процес розробки та співпраці.

Всі ці аспекти роблять існування різних версій важливим елементом в індустрії розробки програмного забезпечення.

Підсумовуючи, на основі наведеного аналізу можна зробити висновок, що існування множинних версій документів є невід'ємною складовою різноманітних сфер людської діяльності. В науковій сфері фіксація проміжних результатів досліджень уможливлює ретроспективний аналіз еволюції знань. В художній творчості створення альтернативних інтерпретацій сприяє новаторству та експериментам. В юриспруденції версіювання законодавчих актів забезпечує правильність правозастосування. У сфері перекладу наявність кількох мовних версій робить можливим подолання комунікативних бар'єрів. В індустріальній сфері оновлення стандартів та програмного забезпечення сприяє підвищенню безпеки, ефективності та сумісності. Тким чином, можна стверджувати, що версіювання документів є критично важливим чинником науково-технічного прогресу та культурної еволюції.

# Розділ 2

# Колективна робота

Важливість колективної роботи очевидна для виробничих галузей, адже група людей фізично може зробити більше, ніж одна людина. Також очевидно, що не всі види діяльності масштабуються ідеально, адже девʼять жінок не народять дитину за місяц, а тисяча школярів не здатні виконувати функцію одного викладача. Тому особливо цікавими є дослідження колективної роботи в контексті інтелектуальної діяльності. В дослідженні на тему "Зростаюче домінування команд у виробництві знань" [10] автори проаналізували майже 20 мільйонів наукових робіт та патентів за 5 десятиліть, щоб вивчити тенденції в індивідуальних та колективних дослідженнях. Вони виявили такі факти:

- У всіх основних галузях науки та техніки, суспільних наук, мистецтва, гуманітарних наук та патентів спостерігається стійка тенденція переходу від індивідуальних до колективних досліджень.
- У природничих науках відсоток статей, опублікованих індивідуальними авторами, знизився з близько 85% у 1950-х роках до 45% у 2000 році. Подібні тенденції спостерігалися у суспільних науках та мистецтві та гуманітарних науках.
- Наразі дослідницькі колективи випускають роботи з найбільшим впливом, навіть у галузях, де раніше домінували індивідуальні автори. Колективи частіше створюють високоцитовані дослідження, ніж окремі автори.
- На початкових етапах, проаналізованих у дослідженні, окремі автори частіше створювали найбільш видатні високоцитовані роботи в науці та техніці та суспільних науках. Але вже в 2000 році роботи, написані колективами, домінували у верхній частині індексів цитувань.
- Зростаючі масштаби, складність та вартість сучасних досліджень, ймовірно, пояснюють збільшення кількості колективних робіт в лабораторних дослідженнях. Але подібне зростання кількості колективних робіт в математиці, економіці тощо свідчить про додаткові фактори, такі як зростання кількості дослідників, спеціалізацію та зниження витрат на комунікацію.

Ефективна колективна робота над документацією, як технічною, так і нетехнічною, вимагає комбінації процесів, практик та інструментів, розроблених для сприяння комунікації, координації та обміну інформацією між членами команди. Перелічимо основні складові успішних стратегій.

## Процеси та практики

**Стандарти.** Встановлення стандартів документації є важливим для ефективної колективної роботи. У разі регульованих індустрій, таких як телекомунікації, або фінанси, наявність стандартів - критично важлива. Детальний стандарт забезпечує узгодженість та чіткість у всіх документах, визначає вимоги до створення і підтримки документації, в також враховує фактори, актуальні для ефективної роботи над документацією. Наприклад міжнародний стандарт ISO/IEC/IEEE 26511:2018 [11] містить такі аспекти системного та програмного інжинірингу як вимоги для замовників та постачальників користувацької документації:

- Описує вимоги та процедури для управління інформацією для користувачів протягом життєвого циклу розробки програмного забезпечення, інформаційних послуг та систем.
- Застосовується до організацій та осіб, що створюють набори даних, окремі інформаційні проекти розробки та внутрішню або службову документацію.
- Охоплює діяльність з управління інформацією, таку як запуск проекту, формування команди, управління інформацією через переклад/локалізацію, вимірювання продуктивності та якості тощо.
- Визначає процеси стратегічного планування, планування проектів, оцінки потреб користувачів, формування команд, управління проектами, вимірювання якості та продуктивності тощо.
- Визначає вимоги до ключових документів, таких як стратегічні плани та плани проектів.
- Не залежить від конкретних програмних засобів і застосовується до друкованої і електронної форм документації.
- Є актуальним для менеджерів, розробників та замовників інформаційних систем, рецензентів, тестувальників та інших, хто залучений до розробки інформаційних систем.
- Мета стандарту - побудова процесів, що дозволяють випускати високоякісну, актуальну, точну документацію для користувачів рентабельним способом.

### **Взаємні ревьʼю**

Регулярний взаємний перегляд документів колегами, співавторами та рецензентами і надання зворотного зв'язку забезпечує високу якість документації [12]. Мета взаємного рецензування - це надати можливість іншому співавтору або рецензенту переглянути ваш документ та визначити сфери для його вдосконалення. Взаємне ревьʼю допомагає покращити якість документа шляхом отримання об'єктивного погляду з боку сторонньої особи, залученню іншої точки зору. Цей процес конструктивний, коли співавтори мають спільну ціль - створити якісний документ і надають один одному регулярний зворотний зв'язок для покращення загальної якості документів [13]. Ефективний процес взаємного рецензування надає такі переваги:

- Вирішує основні питання структури, мови, слідування загальним правилам та шаблонам
- Допомагає узгодити стилі написання документів в команді
- Досвідченні рецензенти можуть приносити цінні ідеї
- Забезпечує технічну точність з мінімальними зусиллями від оригінального автора

### **Інструменти**

**Платформи для спільної роботи над документами**. Інструменти як Wiki, Google Docs, Microsoft Office Online або Confluence дозволяють багатьом користувачам разом працювати над документами, відстежувати зміни та залишати коментарі. В залежності від того, як організований робочий процес, спільна робота над документом може бути одночасною, серіалізованою або повністю асинхронною. Кожен варіант має свої переваги і недоліки [14].

- Одночасна. Всі співавтори мають можливість вносити зміни одночасно.
    - _Переваги_: Швидка взаємодія між учасниками, можливість відразу бачити зміни, які вносять інші, та відповідно реагувати на них. Це особливо корисно для оперативних зустрічей або брейнштормів.
    - _Недоліки_: Можливі конфлікти змін, якщо два користувача намагаються вносити зміни в одну і ту ж частину документа. Також потребує постійного підключення до Інтернету.
- Серіалізована. Співавтори вносять зміни по черзі, тільки один автор може змінювати документ, всі решта чекають, поки він закінчить.
    - _Переваги_: Зменшує ризик конфліктів змін, оскільки тільки одна особа може редагувати документ у певний момент часу. Це може бути корисно для документів, які потребують послідовного огляду або редагування.
    - _Недоліки_: Процес редагування може бути повільнішим, оскільки інші учасники мають чекати, поки їхній черга прийде. Це може призвести до затримок у роботі.
- Асинхронна. Співавтори працюють паралельно, незалежно один від одного, до тих пір, поки не захочуть обʼєднати свої правки.
    - _Переваги_: Гнучкість у роботі, дозволяє учасникам працювати в зручний для них час без необхідності чекати на інших. Відмінно підходить для команд, розташованих в різних часових поясах.
    - _Недоліки_: Можливі конфлікти при об'єднанні змін, якщо два або більше учасників вносили зміни в одні й ті же частини документа. Потребує додаткового часу на об'єднання та узгодження змін.

**Системи контролю версій**. Системи як Perforce, Subversion, Mercurial, Git дозволяють командам керувати змінами та зберігати всі версій документів, що особливо корисно для технічної документації. Розрізняють такі види систем контролю версій:

**Локальні** системи контролю версій:

Ці системи працюють на одному комп'ютері та відстежують зміни у локальних файлах. Приклад: RCS (Revision Control System [15]). Локальна система контролю версій - це локальна база даних, розташована на вашому локальному комп'ютері, в якій кожна зміна файлу зберігається як окрема дельта від попередньої версії. Щоб побачити, як виглядав файл у певний момент, необхідно виконати всі зміни до файлу по порядку від самої першої його версії до цього моменту.

Основною проблемою є те, що все зберігається локально. Якщо щось трапиться з локальною базою даних, всі патчі будуть втрачені. Якщо щось трапиться з якоюсь окремою версією, всі зміни, зроблені після цієї версії, будуть втрачені. Також дуже важко або майже неможливо співпрацювати з іншими розробниками або командою.

**Централізовані** системи контролю версій:

Ці системи використовують один централізований сервер, на якому зберігаються всі версії файлів, і клієнти, які отримують копії файлів з цього сервера. Приклади: SVN (Subversion [16]), CVS (Concurrent Versions System [17]), Perforce [18]. Централізована система контролю версій має єдиний сервер, який містить всі версії файлів. Це дозволяє багатьом клієнтам одночасно отримувати доступ до файлів на сервері, завантажувати їх на свій локальний комп'ютер або відправляти їх на сервер зі свого локального комп'ютера. Адміністратори контролюють, хто що може робити. Це дозволяє співпрацювати з іншими розробниками або командою.

Принциповою проблемою цієї структури є те, що все зберігається на централізованому сервері. Якщо щось трапиться з цим сервером, ніхто не зможе зберегти свої версіоновані зміни, витягнути файли або взагалі співпрацювати. Як і у випадку з локальним контролем версій, якщо центральна база даних пошкодиться, і резервні копії не зберігалися, втрачається вся історія проекту, крім окремих файлів, які випадково збереглись у людей на локальних машинах.

**Розподілені** системи контролю версій:

У таких системах кожен користувач має повну копію репозиторію, тобто він має всю історію змін. Приклади: Git [19], Mercurial [20], Bazaar [21], Darcs [22]. З розподіленими системами контролю версій клієнти не просто отримують останній знімок файлів з сервера, вони повністю дублюють сховище, включаючи всю його історію. Таким чином, кожен, хто співпрацює над проектом, володіє локальною копією всього проекту, тобто володіє власною локальною базою даних з власною повною історією.

За такої моделі, якщо сервер стає недоступним або виходить з ладу, будь-яке з клієнтських сховищ може надіслати копію версії проекту будь-якому іншому клієнту або знову на сервер, коли він стане доступний. Достатньо, щоб у одного клієнта була правильна копія, яку потім можна легко розповсюдити далі. Git - найвідоміший приклад розподілених систем контролю версій.

Будь-яка система контролю версій дає можливість відслідковувати і контролювати зміни, і дає суттєві переваги в роботі порівняно з випадком, коли контролю версій немає взагалі. Але через недоліки локальних і централізованих систем, в сучасній практиці переважно використовують розподілені системи контролю версій.

## Інші чинники

### **Різноманітність**

Існує багато досліджень, які показують переваги різноманітності в науковій роботі. Наприклад в роботі на тему "Перевага етнічної різноманітності у науковій співпраці" [23] де проаналізовано понад 9 мільйонів наукових робіт та 6 мільйонів вчених, щоб дослідити зв'язок між науковим впливом досліджень та різними типами різноманітності, виявлено наступне:

- Етнічна різноманітність у дослідницьких командах має найсильніший зв'язок з науковим впливом, вимірюваним кількістю цитувань. Це було несподіваним висновком, оскільки етнічна приналежність, як до того вважалося, менш пов'язана з технічною компетентністю, ніж такі фактори, як академічна дисципліна.
- Використовуючи випадкові базові моделі та укрупнене точне співставлення, дослідники виявили переконливі докази того, що роботи та вчені з більшою етнічною різноманітністю перевершили менш різноманітних колег. Для високоцитованих робіт і вчених етнічна різноманітність призвела до зростання впливу більш ніж на 10% і 47% відповідно.
- Результати припускають, що рекрутери повинні прагнути заохочувати етнічну різноманітність у дослідницьких командах, оскільки, схоже, це дає реальні переваги, такі як поліпшення продуктивності та впливу, ймовірно, через відмінності в поглядах і культурі.
- Результати підкреслюють, що крім технічної компетентності, при формуванні різноманітних дослідницьких груп слід враховувати такі фактори, як згуртованість команди та почуття єдності.

Зауважимо, що для побудови дійсно різноманітної команди в сучасних умовах доводиться організовувати взаємодію людей в різних часових поясах. Таким чином, доцільною є побудова **асинхронних** процесів робочої комунікацій за допомогою **розподілених** систем, таких як Git.

### **Локалізація та інтернаціоналізація**

В сучасних умовах різноманітною буде також цільова аудиторія. Всі сучасні інформаційні системи мають враховувати необхідність локалізації і інтернаціоналізації [24]. Визначення цих термінів, які дає Консорціум Всесвітньої Мережі (W3C) - наступні [25].

**Локалізація** - це адаптація продукту, додатку чи вмісту документа для задоволення мовних, культурних та інших вимог конкретного цільового ринку (локалі). Часто локалізація помилково сприймається лише як синонім перекладу інтерфейсу користувача та документації, але насправді локалізація є набагато складнішим процесом. Вона може включати в себе пристосування, пов'язані з:

- Числовими форматами,
- Часовими форматами і форматами дат в календарі
- Використанням валюти
- Використанням клавіатури
- Алфавітним сортуванням
- Символами, піктограмами та кольорами
- Текстом та графікою, що містять посилання на об'єкти, дії чи ідеї, які в певній культурі можуть бути неправильно зрозумілі чи неприйнятні
- Юридичними вимогами

Локалізація іноді може вимагати повного переосмислення логіки візуального дизайну, якщо спосіб ведення бізнесу (наприклад, бухгалтерський облік) або прийнята парадигма (наприклад, фокус на окремій особі або групі) у даній місцевості або цільовій аудиторії істотно відрізняється від вихідної культури.

**Інтернаціоналізація** - це таке проектування та розробка продукту, додатку або вмісту документа, яке дозволяє легку подальшу локалізацію для різних цільових аудиторій, які відрізняються культурою, регіоном або мовою.

Інтернаціоналізація, як правило, передбачає:

- Проектування та розробку таким чином, щоб усунути бар'єри для локалізації або міжнародної дистрибуції. Одне з основних вимог при цьому - використання Unicode або забезпечення належної обробки застарілих варіантів кодувань символів, уникнення залежності коду від значень рядків інтерфейсу користувача тощо.
- Забезпечення підтримки функцій, які можуть не використовуватися до тих пір, поки не відбудеться локалізація. Наприклад, додавання розмітки для підтримки двонаправленого тексту або для ідентифікації мови.
- Підтримка локальних, регіональних, мовних уподобань. Зазвичай це включає в себе вбудовані дані і функції локалізації, отримані з існуючих бібліотек або користувальницьких налаштувань. Приклади включають формати дати і часу, локальні календарі, числові формати і числові системи, сортування та подання списків, поводження з особистими іменами та формами звернення тощо.
- Відокремлення локалізованих елементів від вихідного коду або вмісту, так що локалізовані альтернативи можна завантажувати або вибирати за потреби на основі міжнародних уподобань користувача.

Варто памʼятати, що ці пункти не обов'язково включають локалізацію вмісту, додатку чи продукту на іншу мову. Це практики проектування і розробки, які дозволяють легко здійснити таку міграцію в майбутньому. При цьому вони також корисні навіть якщо локалізація ніколи не відбудеться. Ідеально, щоб інтернаціоналізація відбувалася як фундаментальний крок у процесі проектування та розробки, а не як додаткове міркування яке відбулося постфактум і викликало потребу в повному перепроектуванні.

Як бачимо із визначень, інтернаціоналізація і локалізація вимагатимуть використання процесів, повʼязаних із порівнянням рядків тексту, різних його версій. Для збереження і порівняння версій великої кількості тексту у промислових масштабах використання системи контролю версій буде чинником, що критично впливає на результат. Використання саме розподіленої системи контролю версій при цьому дозволить асинхронно узгоджувати роботу людей з різних країн та часових зон.

### **Цільова аудиторія**

Крім колективу, що безпосередньо працює над документацією, на якість документів також впливає і цільова аудиторія [26]. Ефективний процес підтримки належної якості документації має включати:

- Тестування документації. Залучення внутрішніх та зовнішніх груп для перевірки документації допомагає виявити недоліки, незрозумілості або неточності [27]. Внутрішні групи можуть включати інших членів команди, тоді як зовнішні групи можуть бути представниками цільової аудиторії або незалежними експертами.
- Своєчасні оновлення документації. Використання систем неперервної інтеграції та неперервної доставки (CI/CD) дозволяє автоматизувати процес оновлення документації, гарантуючи, що вона завжди актуальна і відповідає останнім змінам у продукті чи сервісі.
- Інтеграція з іншими системами. Інтеграція документації з пошуковими системами та соціальними мережами підвищує її видимість та доступність для користувачів [28]. Це також може сприяти зворотньому зв'язку та зміцненню взаємодії з користувачами.
- Отримання зворотного звʼязку. Вкрай необхідне для ефективної підтримки належного рівня якості документації. В сучасних умовах існує багато інструментів і продуктів, що максимально спрощують взаємодію з кінцевими споживачами. Пошукові системи, агрегатори, wiki ресурси, спеціалізовані форуми, групи в соціальних мережах, тощо.

Зауважимо, що використання розподілених систем контролю версій, таких як Git, та продуктів як GitHub, дозволяє залучати спільноту користувачів до процесу створення та вдосконалення документації. За допомогою механізму пулл-реквестів користувачі можуть пропонувати виправлення, а за допомогою функцій опису проблем (Issues) – повідомляти про проблеми або обговорювати нові функції

Підсумовуючи надану інформацію, можемо зробити такі проміжні висновки:

- Дослідження показують зростаючу тенденцію переходу від індивідуальних до колективних досліджень у всіх галузях науки і техніки. Колективи частіше створюють високоцитовані дослідження, ніж окремі автори.
- Ефективна колективна робота вимагає належних процесів, практик та інструментів. Серед них - стандарти документації, взаємні рев'ю, спільні платформи, системи контролю версій.
- Розподілені системи контролю версій, на відміну від локальних і централізованих, забезпечують надійне збереження всієї історії змін. Це дозволяє ефективну співпрацю та асинхронну координацію колективної роботи.
- Системи контролю версій є важливою складовою процесів локалізації та інтернаціоналізації, оскільки дозволяють зберігати та порівнювати різні версії перекладів.
- Використання систем на кшталт GitHub дозволяє залучати спільноту користувачів до процесу удосконалення документації за допомогою механізмів пулл-реквестів та повідомлення про помилки.

Отже, використання розподілених систем контролю версій є важливим чинником підвищення ефективності та якості колективної роботи над документацією в сучасних умовах.

# Розділ 3

# Теоретичні основи систем контролю версій

## Історія розвитку систем контролю версій.

### Історичний контекст систем контролю версій.

Еволюція систем контролю версій (СКВ) є процесом, що віддзеркалює стрімкий розвиток комп'ютерних технологій та зростаючу складність розробки програмного забезпечення. Щоб краще зрозуміти значення систем контролю версій у сфері програмної інженерії та за її межами, важливо зануритися в їхній історичний контекст, простеживши шлях до ери, коли керування різними версіями програмного забезпечення та документів було ручним і громіздким процесом.

У найперші дні програмування комп'ютерів, протягом 1950-х і 1960-х років, концепція контролю версій практично не існувала. Програмісти писали код на перфокартах і змушені були вручну керувати версіями свого програмного забезпечення. Цей процес був неефективний, часто призводив до плутанини та втрати даних. По мірі зростання розміру та складності програмних проектів, потреба у систематичному способі керування змінами стала очевидною.

1970-ті роки ознаменувалися початком більш структурованого, хоча ще й ручного, підходу до розробки програмного забезпечення. Програмісти почали використовувати методики, такі як зберігання коду в декількох каталогах або використання конвенцій іменування файлів для розрізнення версій [29]. Однак ці методи були недосконалими і не вирішували зростаючих проблем у спільній командній розробці та відстеженні версій.

Концепція контролю версій почала набувати більш конкретної форми з появою системи контролю вихідного коду (Source Code Control System, SCCS) у 1972 році, розробленої Марком Дж. Рочкіндом у Bell Labs. SCCS була першою системою, яка автоматизувала завдання відстеження різних версій файлів вихідного коду, запровадивши основні принципи контролю версій, як ми розуміємо їх сьогодні [29]. Однак ця система знову ж таки була обмежена одним користувачем і не мала можливостей для підтримки середовищ спільної розробки.

Потреба у спільних інструментах для розробки програмного забезпечення призвела до створення системи контролю ревізій (Revision Control System, RCS) на початку 1980-х років Вальтером Ф. Тіхі. RCS покращила SCCS, запровадивши більш ефективні механізми зберігання та кращу підтримку декількох користувачів [15]. Незважаючи на ці удосконалення, як SCCS, так і RCS були в основному локальними системами контролю версій, тобто працювали на одній машині і не були призначені для мережевих середовищ.

Історичний контекст систем контролю версій визначався безперервними зусиллями адаптації до мінливих потреб процесів розробки програмного забезпечення. Від ручних методів до локальних систем контролю версій, а пізніше до централізованих і розподілених систем, кожен етап є реакцією на конкретні виклики, зумовлені еволюцією обчислювальної техніки та практик розробки програмного забезпечення. Розуміння цієї історії є важливим для осягнення поточного стану та майбутнього потенціалу систем контролю версій у керуванні дедалі складнішими колективними процессами розробки програмного забезпечення і документації.

### Опис найперших методів контролю версій
(ручні методи, контроль документації)

Витоки систем контролю версій можна простежити ще до цифрової ери, коли ручні методи та контроль документації були основними засобами управління версіями документів та програмного забезпечення. Розглянемо ці архаїчні, проте фундаментальні методи а надамо історичний контекст еволюції систем контролю версій.

Спочатку контроль версій був переважно ручним процесом. В контексті управління документами та програмним забезпеченням, це включало фізичне супроводження та організацію паперових документів чи магнітних стрічок, де зберігалися коди програмного забезпечення. Кожна ревізія документа чи компонента програмного забезпечення була окремим фізичним об'єктом, часто позначена або анотована від руки, щоб вказати її версію, дату створення та автора. Цей примітивний підхід був трудомістким і призводив до помилок, але заклав основу для більш досконалих систем.

В академічних і корпоративних середовищах, особливо в інженерії та розробці програмного забезпечення і документації, відстеження змін було вкрай важливим. Інженери і розробники вели "журнали змін" або "журнали модифікацій" у своїй документації, практика, яка досі поширена в різних формах [30]. Ці журнали забезпечували хронологічний запис змін, виправлення помилок та додавання нових можливостей, слугуючи примітивною формою відстеження версій.

Контроль документації був ще одним визначальним аспектом раннього контролю версій. Це включало суворі правила управління документами, зокрема створення, перегляд, модифікацію, випуск, розповсюдження та доступність документів. У багатьох галузях, особливо в таких як аерокосмічна, оборонна та галузь охорони здоров'я, контроль документації був і залишається регуляторною вимогою, що забезпечує точність та відстежуваність інформації з плином часу [31].

У цих системах кожна ревізія документа, як правило, копіювалася, переглядалася та затверджувалася перед тим, як бути "випущеною" для використання. Оригінал документа часто зберігався в безпечному місці, в той час як копії розповсюджувалися серед відповідних сторін. Цей метод гарантував, що всі працювали з "останньою" версією, концепція, що є центральною для сучасних систем контролю версій.

Ручні методи та контроль документації були ефективними до певної міри, але мали значні обмеження, особливо зі зростанням складності та розміру проектів. Трудомісткий характер цих методів, разом із ризиком людської помилки та труднощами у відстеженні множинних змін одночасно, призвели до виникнення потреби в більш систематичному контролі версій у розробці програмного забезпечення. Ця потреба ставала все більш виразною з появою цифрової ери та поширенням використання комп'ютерів наприкінці 20-го століття.

З просуванням в еру цифрових обчислень, ці ручні методи та контроль документації заклали основоположні принципи для першого покоління систем контролю версій. Перехід від ручних до автоматизованих систем позначив значний стрибок в ефективності та результативності контролю версій, підготувавши фундамент для більш досконалих систем, які ми використовуємо сьогодні.

### Поява необхідності у систематичному контролі версій у розробці програмного забезпечення і документації.

Необхідність систематичного контролю версій у розробці програмного забезпечення і документації виникла як пряма відповідь на зростаючу складність і колаборативний характер проектів. До цього розробка програмного забезпечення і документації часто була більш лінійною та індивідуалістичною справою, де виклики управління різними версіями коду були менш помітними. Однак, по мірі зростання складності і масштабів систем програмного забезпечення, розширення команд та створення географічно розподілених команд, обмеження неформальних методів контролю версій ставали дедалі очевиднішими.

Із зростанням розміру і складності проектів програмного забезпечення і документації, завдання відстеження змін, управління множинними версіями коду та забезпечення узгодженості між різними частинами проекту ставало дедалі складнішим. Ранні методи контролю версій, часто орієнтовані на ручні документо-орієнтовані не автоматизовані процеси, були недостатніми для зростаючих вимог. Необхідність більш систематичного підходу була підкреслена декількома сумнозвісними збоями програмного забезпечення і помилками, які були наслідком поганого управління версіями та відсутності координації між розробниками [29].

Перехід до колаборативних середовищ розробки, особливо з появою проектів з відкритим кодом і розподілених команд, ще більше підкреслив необхідність систематичного контролю версій. Як зазначають Коллінз-Сассман та ін. [30], здатність ефективно співпрацювати над кодовими базами, не перезаписуючи роботу один одного та не гублячи зміни, стала критичною вимогою. Це вимагало системи, яка не лише відстежує зміни, але й полегшує співпрацю між декількома розробниками, можливо розташованими в різних географічних локаціях.

Прийняття ітеративних та інкрементних моделей розробки, таких як гнучкі методології (Agile), також відіграло важливу роль у виникненні систематичного контролю версій. Ці моделі розробки, які підкреслюють адаптивність і часті зміни програмного забезпечення і документації, вимагали більш динамічного і гнучкого підходу до контролю версій. Традиційні методи були занадто повільними і неефективними, щоб пристосуватись до швидкого темпу змін, притаманних цим методологіям [32].

Технологічні досягнення, особливо в сфері обчислювальних потужностей та зберігання даних, також сприяли можливості і необхідності більш досконалих систем контролю версій. Як зазначив Спінелліс [33], збільшені можливості зберігання та обробки даних дозволили розробку більш складних систем контролю версій, здатних опрацьовувати великі кодові бази та детальну історію змін.

Отже, поява необхідності систематичного контролю версій у розробці програмного забезпечення була багатогранним розвитком, спричиненим зростаючою складністю проектів програмного забезпечення, появою колаборативних і розподілених команд розробки, прийняттям ітеративних моделей розробки та технологічним прогресом. Ця потреба призвела до розробки першого покоління систем контролю версій, заклавши фундамент для еволюції більш просунутих систем у наступні роки.

### Перше покоління: локальні системи контролю версій

Перше покоління цих систем, відомих як локальні системи контролю версій, ознаменувало значний прогрес у галузі програмної інженерії. Ці системи були створені для вирішення проблем, які ставили попередні, ручні методи контролю, що часто були громіздкими і призводили до помилок [30].

Локальні системи контролю версій працювали в межах персонального комп'ютера користувача. На відміну від ручних методів, які покладалися на копіювання файлів у окремі каталоги для управління версіями, л автоматизували цей процес. Одним з найперших прикладів локальної системи контролю версій була система контролю вихідного коду (Source Code Control System, SCCS), розроблена Марком Дж. Рочкіндом у Bell Labs в 1972 році. SCCS ввела концепцію зберігання лише змін, зроблених у програмному забезпеченні, а не повних копій файлів, метод, відомий як «зберігання різниці» або «диференційне зберігання» [29]. Цей підхід значно зменшив об'єм сховища, необхідного для зберігання кожної версії.

Іншою помітною системою цієї ери була Система Контролю Ревізій (Revision Control System, RCS), яка розвивалася на основі SCCS. Розроблена Вальтером Ф. Тічі на початку 1980-х років, RCS вдосконалила SCCS, впровадивши більш ефективний алгоритм зберігання та кращі інструменти для злиття змін та вирішення конфліктів [15]. RCS мала значний вплив на архітектуру наступних систем контролю версій, оскільки заклала основи для багатьох концепцій, які досі використовуються в сучасних системах, таких як ідентифікатори комітів та атомарні операції.

Основною перевагою цих ранніх систем була їх простота та контроль, який вони надавали окремим розробникам над версіями їх коду. Однак у них також були значні обмеження. Найбільш помітним була їх відсутність підтримки спільної роботи. Оскільки ці системи були локальними, контроль версій кожного розробника був ізольований, що ускладнювало інтеграцію змін з декількох джерел. Це обмеження ставало все більш проблематичним, оскільки програмні проекти зростали за розміром та складністю, вимагаючи співпраці між більшими командами розробників.

Таким чином, локальні системи контролю версій стали важливим кроком в еволюції технологій контролю версій. Вони перевели контроль версій з ручного процесу до більш надійної автоматизованих систем. Хоча вони мали обмежені можливості підтримки спільної розробки, ці системи ввели ключові концепції та методології, які проклали шлях для більш просунутих, колаборативних систем контролю версій в наступних поколіннях.

### Друге покоління: централізовані системи контролю версій

Еволюція систем контролю версій ознаменувалася важливою віхою з появою другого покоління, яке характеризується централізованими системами контролю версій (ЦСКВ). Цей етап вирішував численні обмеження, властиві системам першого покоління.

Централізовані системи контролю версій з'явилися у відповідь на зростаючу потребу у співпраці в проектах розробки програмного забезпечення. У централізованих системах головна частина встановлюється на сервері, де зберігається вся інформація, а розробники як клієнти підключаються до цього сервера, щоб отримати останню версію коду та внести зміни [30]. Така архітектура стала значним вдосконаленням в порівнянні з локальними локальними системами контролю версії, оскільки дозволяла декільком розробникам працювати над одним проектом, зменшуючи ризики конфліктних змін.

Одним з найбільш помітних прикладів централізованої системи контролю верссій є Subversion (SVN), яка була спеціально розроблена як вдосконалена CVS (Concurrent Versions System) - перша широко поширена централізована система контролю версій [30]. SVN пропонувала декілька вдосконалень в порівнянні з CVS, таких як атомарні коміти (що гарантують, що або всі зміни в коміті застосовуються, або жодна не застосовується), та кращу роботу з бінарними файлами. Централізована природа SVN та подібних систем також означала, що адміністратори могли реалізувати більш тонкий контроль над дозволами доступу - важлива функція для великих команд [34].

Проте, незважаючи на свої переваги, централізовані системи також мали обмеження. Найбільш значущим була одна точка відмови; якщо центральний сервер виходив з ладу, ніхто не міг співпрацювати або отримати доступ до останньої версії проекту. Більше того, ці системи часто вимагали постійного підключення до сервера, що могло бути перешкодою для розробників, які працюють віддалено або в регіонах з нестабільним інтернет-з'єднанням [19].

В академічній літературі вивчення централізованих систем контролю версій часто зосереджується на їх ролі у сприянні спільній роботі, а також висвітлює проблеми, які вони створюють у плані залежності від сервера та потенційних "вузьких місць" у робочому процесі [33]. Незважаючи на ці проблеми, централізована модель була важливим кроком в еволюції контролю версій, підготувавши фундамент для наступного покоління систем контролю версій - розподілених систем.

Отже, друге покоління систем контролю версій, представлене централізованими моделями на зразок SVN, відіграло вирішальну роль в удосконаленні процесів спільної розробки програмного забезпечення. Хоча вони вирішили багато обмежень локальних систем, їх залежність від центрального сервера створила нові проблеми, відкривши шлях для розвитку розподілених систем контролю версій.

### Третє покоління: розподілені системи контролю версій

Наступним етапом еволюції систем контролю версій стала поява третього покоління, яке характеризується розподіленими системами контролю версій. Це покоління позначило зміну парадигми в управлінні контролем версій, пропонуючи розширені можливості та вирішуючи багато обмежень, властивих централізованій моделі другого покоління.

Централізовані системи, хоча й були покращенням у порівнянні з локальними системами контролю версій, все ще мали єдину точку відмови у центральному сховищі та часто отримали нарікання за їх недостатню продуктивність, особливо у масштабних проектах [35]. Розподілені системи контролю версій з'явилися як відповідь на ці проблеми, пропонуючи більш надійний, гнучкий та ефективний підхід до контролю версій.

На відміну від своїх централізованих аналогів, розподілені системи контролю версій, такі як Git, Mercurial та Bazaar, не зберігають всю інформацію на одному сервері. Натомість кожен учасник має повну локальну копію всіх версій даних, включаючи всю історію змін [19]. Ця децентралізація фундаментально змінює робочий процес кількома способами:

- **Надлишковість та стійкість** : розподілена природа властиво забезпечує надлишковість. Кожна копія сховища є повним резервним копіюванням, підвищуючи стійкість до втрати даних [19].
- **Продуктивність та гнучкість** : операції, такі як коміт, галуження (створення гілок) та злиття, виконуються локально, що призводить до значного підвищення продуктивності. Це також дозволяє розробникам працювати автономно, синхронізуючи зміни інших у зручний час [35].
- **Спрощена модель створення гілок** : розподілені системи контролю версій полегшує більш складні практики галуження та злиття, дозволяючи більш динамічну модель співпраці. Це призвело до розробки різних робочих процесів, таких як гілки функцій та Gitflow, які особливо підходять для розподілених систем контролю версій [36].

Поширення розподілених систем контролю версій мало глибокий вплив на практики розробки програмного забезпечення. Удосконалений, та більш гнучкий підхід до контролю версій, краще пристосований для розподілених команд та гнучких методологій, ніж попередні покоління, значно спрощував процес паралельної розробки в розподілених командах, а також за рахунок простоти процесу створення гілок заохочував до експериментів у розробців, сприяючи інноваціям.

Незважаючи на свої переваги, розподілені системи також не позбавлені проблем. Крива навчання, особливо для таких систем, як Git, може бути досить крутою для користувачів, звиклих до централізованих систем. Крім того, децентралізований підхід може призвести до безконтрольного розмноження гілок і, без належного управління, до більш складної історії змін.

Таким чином, третє покоління систем контролю версій, революціонізувало сферу розробки програмного забезпечення і документації. Долаючи багато обмежень попередніх поколінь та впроваджуючи нові можливості з точки зору продуктивності, гнучкості паралельної розробки та співпраці в розподілених командах, розподілені системи контролю версій стають фактичним стандартом для сучасних проектів розробки програмного забезпечення і документації. Оскільки галузь продовжує розвиватися, робимо висновок, що принципи та технології, що лежать в основі розподілених систем контролю версій, будуть мати значний вплив і на майбутній розвиток систем контролю версій.

### Сучасні тенденції та перспективи на майбутнє

Ландшафт систем контролю версій постійно розвивається, формуючись під впливом динамічних потреб розробки програмного забезпечення та технологічних досягнень у сфері обчислювальної техніки. Зараз можна виділити кілька тенденцій та потенційних майбутніх розробок.

**Сучасні тенденції** :

- **Інтеграція з DevOps та процесами безперервної інтеграції / безперервним розгортанням (CI/CD)**. Сучасні системи контролю версій все глибше і щільніше інтегруються з практиками та інструментами DevOps. Така інтеграція сприяє безперервній інтеграції та безперервному розгортанню, дозволяючи більш ефективні та автоматизовані робочі процеси [37]. Інструменти як Jenkins, Travis CI та GitLab CI наочно демонструють тенденцію, де контроль версій глибоко інтегрується з усім життєвим циклом розробки програмного забезпечення.
- **Застосування машинного навчання та штучного інтелекту**. Спостерігається зростаючий інтерес до застосування машинного навчання (ML) та штучного інтелекту (AI) до різних аспектів контролю версій, таких як автоматизація перегляду коду, прогнозування потенційних конфліктів та оптимізація управління гілками [38]. Ці технології можуть значно підвищити ефективність та результативність систем контролю версій.
- **Посилення уваги до безпеки та дотримання регуляторних вимог**. Зі зростанням кіберзагроз та регуляторних вимог, сучасні системи контролю версій все частіше вбудовують передові функції безпеки. Основні з яких - це удосконалений контроль доступу, шифрування та інтеграцію з інструментами тестування безпеки, забезпечення захисту кодової бази та дотримання усіх формальних регуляторних вимог [39].
- **Покращення користувацького досвіду та інструментів співпраці**. Спостерігається спроба зробити системи контролю версій більш зручними не тільки для програмістів, але й для інших користувачів орієнтованих на співпрацю. Платформи як GitHub та GitLab безперервно вдосконалюють свої користувацькі інтерфейси та пропонують додаткові функції управління проектами та співпраці в режимі реального часу, полегшуючи командну роботу [40].

**Перспективи на майбутнє:**

- **Децентралізація за межами управління кодом**. Концепція децентралізації, визначальна риса розподілених систем, таких як Git, може поширитися за межі управління кодом. Майбутні системи можуть децентралізувати інші аспекти розробки програмного забезпечення, такі як документація та управління проектами, пропонуючи більш інтегроване та спільне середовище.
- **Хмаро-орієнтовані системи контролю версій**. В міру того, як хмарні обчислення продовжують домінувати, ми можемо побачити появу хмаро-орієнтованих систем контролю версій, спеціально розроблених для використання переваг хмарних, кластеризованих та мікросервісних архітектур: масштабованості, продуктивності та надійності [41].
- **Крос-платформне та мультирепозиторне управління**. Зі зростаючою складністю програмних проектів, майбутні системи контролю версій мають запропонувати більш надійні рішення для управління декількома репозиторіями на різних платформах, спрощуючи процес розробки великомасштабних мультиплатформених проектів.
- **Генерація та управління кодом за допомогою штучного інтелекту**. Інтеграція штучного інтелекту в системи контролю версій може еволюціонувати не лише для допомоги в управлінні кодом, а й для генерування та оптимізації коду, що потенційно може революціонізувати сам процес розробки програмного забезпечення.
- **Квантові обчислення**. Із розвитком квантових обчислень, системи контролю версій потребуватимуть адаптації для управління та відстеження квантових алгоритмів та програмного забезпечення, які можуть мати фундаментально інші вимоги та виклики у порівнянні з класичним програмним забезпеченням.

Підсумовуючи, майбутнє систем контролю версій, схоже, рухається в напрямку більш інтегрованих, інтелектуальних та зручних для користувача рішень, які стають невідʼємними частинами процесу розробки програмного забезпечення, документацій та управління проектами. Безперервна еволюція цих систем імовірно відіграватиме вирішальну роль у формуванні того, як буде розроблятись, розгортатись та підтримуватись програмне забезпечення в наступні роки.

## Основні терміни

У сфері систем контролю версій розуміння специфічної термінології є вкрай важливим для засвоєння основних принципів і операцій. Цей розділ пояснює ключові терміни, що є фундаментальними для дискурсу щодо систем контролю версій.

- **Репозиторій** : Репозиторій, часто скорочено «репо», є сховищем файлів, де зберігаються файли в системі контролю версій. Його можна розглядати як базу даних змін, що дозволяє користувачам отримувати попередні версії файлів і відстежувати модифікації з часом [35].
- **Різниця або зміна (diff**): Скорочено від «difference», процес порівняння двох версій файлу із спеціальним позначенням для виділення зміни даних від однієї версії до іншої, а також сам результат такого порівняння, тобто різниця між двома версіями. Ця функція є надзвичайно важливою для розуміння конкретних змін, зроблених в кожній ітерації файлу [33].

![](RackMultipart20231120-1-augo2b_html_d4bd89fd854600fb.png)

Рисунок 3.1 – Відображення різниці між версіями файл у GitHub [45]

- **Патч (patch)**: Патч є файлом, що складається зі списку змін (diffs) і використовується для трансформації однієї версії файлу (або набору файлів) в іншу. Патчі часто використовуються для пропонування змін у спільних проектах або для оновлення програмного забезпечення [42].
- **Коміт (commit)**: У системах контролю версій коміт є дією, що фіксує зміни в репозиторії. Кожен коміт має унікальний в межах репозиторію ідентифікатор (часто хеш-суму від зафіксованих даних), який дозволяє відрізняти одну версію від іншої і відстежувати зміни між ними. Це схоже на знімок вашого проекту в певний момент [19].

![](RackMultipart20231120-1-augo2b_html_3789ca3e56c13bd.png)

Рисунок 3.2 – Список комітів в GitHub [45]

- **Тег (tag)**: Тег є маркером, що позначає певну важливу точку в історії репозиторію, наприклад випуск стабільної версії. Теги часто використовуються для версіювання, дозволяючи легший доступ до певних версій програмного коду або документації [30].

![](RackMultipart20231120-1-augo2b_html_f00dade7af85ddb2.png)

Рисунок 3.3 – Створення нового тегу в GitHub [45]

- **Гілка (branch)**: Відгалуження, яке передбачає відхід від основної лінії розробки і продовження роботи в автономному режимі, без внесення змін в основну лінію. Може відрізнятися від основної лінії змінами в файлах, іншим набором комітів, або іншою їх послідовністю. Після завершення автономної роботи (і перевірки роботоспроможності версії), зміни можуть бути злиті в основну гілку розробки. Ця концепція є вкрай важливою для підтримки паралельної розробки серед декількох членів команди [43].

![](RackMultipart20231120-1-augo2b_html_3248ef5a80ff98fe.png)

Рисунок 3.4 – Основна гілка розробки в GitHub [45]

![](RackMultipart20231120-1-augo2b_html_63886e56c1dd06f7.png)

Рисунок 3.5 – Створення нової гілки в GitHub [45]

- **Злиття (merge)**: Злиття - це процес інтеграції змін з різних гілок назад в єдину гілку, часто основну. Цей процес іноді може призводити до конфліктів, які потребують вирішення [19].
- **Запит на злиття (pull request, merge request)**: Запит на злиття (або запит на об'єднання в деяких системах) є способом внесення змін до основної гілки проекту. Він сповіщає членів команди, що окремий користувач завершив свій набір змін і просить об'єднати ці зміни з основною гілкою [40].

![](RackMultipart20231120-1-augo2b_html_333377e0924bfd6e.png)

Рисунок 3.6 – Створення запиту на злиття в GitHub [45]

Зазвичай запит на злиття застосовується, коли над проектом працює декілька людей. Типово заохочує інших учасників проекту робити перегляд змін і надавати зворотній зв'язок автору. Запит на злиття може бути прийнято (бранч користувача буде злитий з основною гілкою), відхилено (пропоновані зміни однозначно небажані з точки зору інших співавторів), або відмічено для подальшого обговорення і вдосконалення запропонованих змін.

![](RackMultipart20231120-1-augo2b_html_5c0202d72992671a.png)
Рисунок 3.7 – Перегляд запиту на злиття в GitHub [45]

- **Конфлікт зливання (merge conflict)**: В контексті систем контролю версій конфлікт виникає, коли зміни в одній гілці несумісні зі змінами в іншій, таким чином вони роблять неможливим злиття. Вирішення конфліктів вимагає ручного втручання в процес злиття, зазвичай потребує участі декількох співавторів, що спільно працюють над кодом і є критичним аспектом спільної роботи в розподілених системах контролю версій [44].

![](RackMultipart20231120-1-augo2b_html_2d5eacedae13cd60.png)

Рисунок 3.9 – Конфлікт, виявлений при порівнянні гілок в GitHub [45]

![](RackMultipart20231120-1-augo2b_html_6f88dea8575d1d9e.png)

Рисунок 3.9 – Файли, зміни в яких спричиняють конфлікт в GitHub [45]

![](RackMultipart20231120-1-augo2b_html_b2e472c77549607c.png)
Рисунок 3.10 – Ручне редагування для вирішення конфлікту злиття в GitHub [45]

Розуміння цих термінів забезпечує базовий лексикон для поглиблення в принципи та функціональні можливості систем контролю версій. Кожен термін представляє критичний компонент у складному процесі управління та відстеження змін у розробці програмного забезпечення та документації.

# Список використаних джерел

1. Офіційний вебпортал парламенту України: [Інтернет-портал]. URL: https://zakon.rada.gov.ua/laws/show/1306-2001-%D0%BF#Text (дата звернення: 18.08.2023).
2. Розетський камінь // Українська Вікіпедія : [Веб-сайт]. URL: https://uk.wikipedia.org/wiki/Розетський\_камінь (дата звернення: 14.10.2023).
3. Поліглотта // Українська Вікіпедія : [Веб-сайт]. URL: https://uk.wikipedia.org/wiki/Поліглотта (дата звернення: 14.10.2023).
4. ДСТУ 7564:2014. Інформаційні технології. Криптографічний захист інформації. Функція гешування.. Київ, 2015. 39 с.
5. ISO/IEC 25010:2011. Systems and software engineering — Systems and software Quality Requirements and Evaluation (SQuaRE) — System and software quality models. ISO/IEC, 2011.
6. Recommended composition of influenza virus vaccines for use in the 2024 southern hemisphere influenza season // Всесвітня організація охорони здоров'я: [Веб-сайт]. URL: https://www.who.int/publications/m/item/recommended-composition-of-influenza-virus-vaccines-for-use-in-the-2024-southern-hemisphere-influenza-season (дата звернення: 14.10.2023).
7. Guideline for the pharmacological treatment of hypertension in adults // Всесвітня організація охорони здоров'я: [Веб-сайт]. URL: https://iris.who.int/bitstream/handle/10665/344424/9789240033986-eng.pdf (дата звернення: 14.10.2023).
8. Населення // Державна служба статистики України: [Веб-сайт]. URL: https://www.ukrstat.gov.ua/operativ/operativ2007/ds/nas\_rik/nas\_u/nas\_rik\_u.html (дата звернення: 14.10.2023).
9. The top 10 causes of death // Всесвітня організація охорони здоров'я: [Веб-сайт]. 2020. URL: https://www.who.int/news-room/fact-sheets/detail/the-top-10-causes-of-death (дата звернення: 14.10.2023).
10. Wuchty, S., Jones, B. F., & Uzzi, B. (2007). The Increasing Dominance of Teams in Production of Knowledge. Science, 316(5827), 1036–1039. doi:10.1126/science.1136099
11. ISO/IEC/IEEE 26511:2018 Systems and software engineering — Requirements for managers of information for users of systems, software, and services. ISO/IEC/IEEE 2018
12. Morgan K. Technical Writing Process: The simple, five-step guide that anyone can use to create technical documents such as user guides, manuals, and procedures. Better On Paper Publications, 2015.
13. Hadjerrouit, S. Wiki as a collaborative writing tool in teacher education: Evaluation and suggestions for effective use. Computers in Human Behavior. 2014, №32, 301-312.
14. Wichmann A. , Rummel N. Improving revision in wiki-based writing: Coordination pays off // Computers & Education. 2013.№ 62. 262-270.
15. Tichy, Walter F. RCS – A System for Version Control. In: Software: Practice and Experience. 1985. Vol 15. № 7. 637–654.
16. Nagel W. Subversion Version Control: Using the Subversion Version Control System in Development Projects. Prentice Hall, 2005.
17. Thomas D. , Hunt A. Pragmatic Version Control using CVS. The Pragmatic Bookshelf, 2003.
18. Wingerd L. Practical Perforce. O'Reilly Media, 2005.
19. Loeliger, J., McCullough, M. Powerful tools and techniques for collaborative software development. O'Reilly Media, 2012.
20. O'Sullivan B. Mercurial: the definitive guide. O'Reilly Media, 2009.
21. Gyerik J. Bazaar Version Control: A fast-paced practical guide to version control using Bazaar. Packt Publishing, 2013.
22. Roundy D. Darcs: distributed version management in Haskell // Proceedings of the 2005 ACM SIGPLAN workshop on Haskell. Tallinn, Estonia, 2005. 1-4.
23. AlShebli, B.K., Rahwan, T. & Woon, W.L. The preeminence of ethnic diversity in scientific collaboration. Nature Communications 9, 5163 (2018). [https://doi.org/10.1038/s41467-018-07634-8](https://doi.org/10.1038/s41467-018-07634-8)
24. Yunker J. Beyond borders: Web globalization strategies. Indianapolis, Ind: New Riders, 2003.
25. Localization vs. Internationalization // The World Wide Web Consortium: [Веб-сайт]. 2005. URL: https://www.w3.org/International/questions/qa-i18n (дата звернення: 14.10.2023).
26. Weiss E. H. How to write usable user documentation. Phoenix, AZ: Oryx Press, 1991.
27. Blakiston R. Usability Testing: A Practical Guide for Librarians. Rowman & Littlefield Publishers, 2014.
28. Markel M. , Selber S. A. Technical Communication, Twelfth Edition. Bedford/St. Martin's, 2017.
29. Rochkind, M. J. The source code control system. IEEE Transactions on Software Engineering, SE-1(4), 364–370. (1975)
30. Collins-Sussman, B., Fitzpatrick, B. W., Pilato, C. M. Version Control with Subversion. O'Reilly Media, 2004.
31. Babich, W. A. Software Configuration Management: Coordination for Team Productivity. Addison-Wesley, 1986.
32. Beck, K. Extreme Programming Explained: Embrace Change. Addison-Wesley, 2000.
33. Spinellis, D. Version Control Systems. IEEE Software, 22(5), 108–109, 2005
34. Tammaro, S. G., Mosier, J. N., Goodwin, N. C., Spitz, G. Collaborative Writing Is Hard to Support. A Field Study of Collaborative Writing. Computer Supported Cooperative Work (CSCW), 6(1), 19–51, 1997.
35. Chacon, S., Straub, B. Pro Git. Apress, 2014
36. A successful Git branching model // Nvie.com: [Веб-сайт]. 2010. URL: [https://nvie.com/posts/a-successful-git-branching-model](https://nvie.com/posts/a-successful-git-branching-model) (дата звернення: 20.11.2023).
37. Jabbari, R., Bin Ali, N., Petersen, K.,Tanveer, B. What is DevOps? A Systematic Mapping Study on Definitions and Practices. Scientific Research Publishing, 2016.
38. Caram, F. L., Rodrigues, B. R. D. O., Campanelli, A. S., Parreiras, F. S. Machine Learning Techniques for Code Smells Detection. A Systematic Mapping Study. International Journal of Software Engineering and Knowledge Engineering, 29(02), 285–316, 2019.
39. Almorsy, M., Grundy, J., Müller, I. An Analysis of the Cloud Computing Security Problem, 2016.
40. Dabbish, L., Stuart, C., Tsay, J., Herbsleb, J. Social coding in GitHub. Proceedings of the ACM 2012 Conference on Computer Supported Cooperative Work - CSCW, 2012
41. Dragoni, N., Giallorenzo, S., Lafuente, A. L., Mazzara, M., Montesi, F., Mustafin, R., Safina, L. Microservices: Yesterday, Today, and Tomorrow. Present and Ulterior Software Engineering, 195–216, 2017
42. Fogel, K. Producing Open Source Software: How to Run a Successful Free Software Project. O'Reilly Media, 2005
43. Swicegood, T. Pragmatic Version Control Using Git. Pragmatic Bookshelf, 2008
44. Mens, T. A state-of-the-art survey on software merging. IEEE Transactions on Software Engineering, 28(5), 449–462, 2002
45. Використання систем контролю версій для колективної роботи над мультимедійною документацією // Github.com: [Веб-сайт]. 2023. URL: https://github.com/ludenus/uad-multimedia-doc (дата звернення: 20.11.2023).